<form 
    x-data="searchSuggest()"
    role="search" 
    action="{{resourceUrl "suche/index.nocache"}}" 
    method="get" 
    class="flex w-full sb-quick-search-form md:justify-end lg:h-10"
>
    <div 
        class="relative w-full lg:rounded-l" 
        id="search-content"
        @click.away="active=false; cursorIndex=-1"
        @keydown.arrow-down="moveDownList()"
        @keydown.arrow-up="moveUpList()"
    >   
        <label for="searchInput--{{nextRandom}}" class="hidden">suchfeld</label>
        <input 
            @input.debounce="getSuggestionsForInput();cursorIndex=-1"
            @click="active=true" 
            name="query" 
            x-model="query"
            placeholder='{{loca "search_input_placeholder" }}' 
            class="w-full px-2 py-2 text-base leading-4 placeholder-opacity-100 border rounded-l rounded-r-none shadow-inner appearance-none lg:border-0 lg:border-none border-primary lg:h-10 placeholder-text-xs placeholder-primary text-primary focus:outline-none"
            type="text"
            id="searchInput--{{getRandom}}"
            autocomplete="off"
            role="combobox" 
            aria-haspopup="listbox" 
            aria-autocomplete="list" 
            x-effect="$el.setAttribute('aria-expanded', (query.length > 1 && active && suggestions.length > 0))"
            aria-owns="suggestionlist--{{getRandom}}"
            aria-controls="suggestionlist--{{getRandom}}"
        > 
        <div 
            class="relative" 
            x-show="query.length > 1 && active && suggestions.length"
            x-cloak
            x-transition:leave="transition ease-in duration-100"
            x-transition:leave-start="opacity-100"
            x-transition:leave-end="opacity-0"
        >
            <ul 
                role="listbox" 
                id="suggestionlist--{{getRandom}}" 
                aria-label="Suche Ã¶ffnen"
                x-effect="$el.setAttribute('aria-expanded', query.length > 1 && active && suggestions.length > 0);$el.setAttribute('aria-hidden', !(query.length > 1 && active && suggestions.length > 0))"
                class="absolute w-full mt-0.5 bg-white border rounded divide-y shadow-xl top-100"
                x-ref="list"
            >
                
                <template x-for="(suggestion, index) in suggestions" :key="index">
                    <li class="first-of-type:border-none">
                        <a  
                            x-bind:active="false"
                            x-bind:href="'{{resourceUrl "suche/index.nocache"}}?query=' + suggestion"
                            x-bind:class="{'py-1.5 px-2 link-focus-inset text-base flex w-full rounded hover:bg-primary hover:text-white': true, 'bg-primary text-white':index==cursorIndex }"
                        >
                            <span x-text="suggestion"></span>
                        </a>
                    </li>
                </template>
                
            </ul>
        </div>  
    </div>
    <button 
        aria-label='{{loca "search_input_aria_submit" }}' 
        type="submit" 
        class="pl-3 pr-2 rounded-r cursor-pointer link-focus-inset bg-primary lg:bg-white text-primary z-170"
    >
        <svg class="w-6 h-6 text-white fill-current bg-primary lg:fill-current lg:text-primary lg:bg-white" 
             xmlns="http://www.w3.org/2000/svg" 
             viewBox="0 0 20 20"
             aria-hidden="true"
        >
            <path d="M12.9 14.32a8 8 0 1 1 1.41-1.41l5.35 5.33-1.42 1.42-5.33-5.34zM8 14A6 6 0 1 0 8 2a6 6 0 0 0 0 12z"></path>
        </svg>
    </button>
</form>

<script type="text/javascript">

    function searchSuggest() {

        return {
            active:true,
            cursorIndex: -1,
            query: "",
            suggestions: [],

            getSuggestionsForInput() {

                suggestionDataUrl = '{{resourceUrl "suche/index~suggest.jsp"}}' + '?suggestions=' + this.query;

                fetch(suggestionDataUrl)

                    .then((res) =>{  return res.text()})

                    .then((data) => {
                        data = JSON.parse(data.replace(/&quot;/g, '"'))
                        data.solrSuggestions = this.filterStartwith(data.solrSuggestions, this.query)
                        this.suggestions= this.filterSortbylength(data.solrSuggestions)
                    });

            },

            filterStartwith(data, query) {
               return data.filter(Suggestion => Suggestion.toLowerCase().startsWith(query.toLowerCase().trim()))
            },

            filterSortbylength(data) {
               return data.sort((a, b) => a.length - b.length)
            },

            moveDownList() {
                    if (this.suggestions.length > 0 && this.cursorIndex < this.suggestions.length - 1) 
                    {
                        this.cursorIndex++;
                        this.query = this.suggestions[this.cursorIndex];
                    }
            },

            moveUpList() {
                    if (this.suggestions.length > 0 && this.cursorIndex > 0) 
                    {
                        this.cursorIndex--;
                        this.query = this.suggestions[this.cursorIndex];
                    }
            },

        };

    }

</script>