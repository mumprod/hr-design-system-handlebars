
<div x-data="stickyPlayer" class="relative ar-16-9" x-intersect:leave.threshold.45="inViewport = false" x-intersect:enter.threshold.45="inViewport = true; videoWasStopedWhenSticky = false">
    <div x-ref="videoElementWrapper"
        class="transition-all lg:transition-none right-4" 
        :class="{   'ar-16-9 w-1/2 max-w-70 sm:w-70 fixed z-300 animate-fade-right animate-once animate-duration-1000': shouldVideoBeFixed(),
                    'animate-fade animate-duration-1000 animate-ease-in-out': !shouldVideoBeFixed(),
                    'top-14 md:top-16': $store.navIsVisible,
                    'lg:top-31': $store.navIsVisible && !$store.subNavIsVisible,
                    'lg:top-40': $store.navIsVisible && $store.subNavIsVisible,
                    'top-14 lg:top-20': !$store.navIsVisible}">                   
        {{> @partial-block }} 
        <button @click="closeVideo()" class="absolute top-0 right-0 flex items-center justify-center w-12 h-12 z-300 hover:scale-105"
                :class="{'hidden': !shouldVideoBeFixed(),
                        'flex': shouldVideoBeFixed()}">
            <div class="flex items-center justify-center w-8 h-8 {{> components/button/utilities/button_base_classes}} {{> components/button/utilities/button_variation_classes _variant="primary"}}">
                 {{> components/button/components/button_icon _icon="close" _iconmap="icons" _css="" }}
            </div>
        </button>	
    </div>
    <script>
        var stickyPlayer = () => {
            return {
                eventListenerInitialized: false,
                inViewport: true, 
                videoStarted: false,
                videoStoped: true,
                videoPlaying: false,
                videoWasStopedWhenSticky: false,
                videoWasClosedByUser: false,
                videoElement: null,

                shouldVideoBeFixed: function () {
                    return (!this.inViewport && this.videoPlaying) || (!this.inViewport && this.videoWasStopedWhenSticky) 
                },
                setupVideoEventListeners: function () {
                    console.log("setupVideoEventListeners");
                    if(!this.eventListenerInitialized) {                          
                        this.videoElement.addEventListener("play", () => {
                            console.log("video:play");
                            this.videoStarted = true;
                            this.videoPlaying = true;
                            this.videoStoped = false;
                        });
                        this.videoElement.addEventListener("pause", () => {
                            console.log("video:pause");
                            this.videoPlaying = false;
                            this.videoStoped = true;
                            if (!this.inViewport ) {
                                if(this.videoWasClosedByUser){
                                    this.videoWasClosedByUser = false
                                } else {
                                    this.videoWasStopedWhenSticky = true;
                                }                               
                            }
                        });
                        this.eventListenerInitialized = true;
                    }
                },
                closeVideo: function () {
                    this.videoWasStopedWhenSticky = false;
                    this.videoWasClosedByUser = true;
                    this.videoElement.pause();                 
                },
                init: function () {
                    this.videoElement = this.$refs.videoElementWrapper.querySelector("video");
                    if(this.videoElement) {
                        this.setupVideoEventListeners();
                    } else {
                        console.log("No video element found in sticky player.");
                        const self = this; // Save a reference to the Alpine instance
                        const observer = new MutationObserver(function() {
                            console.log("MutationObserver: Mutation observed in sticky player.");
                            
                            // Re-check for the video element
                            self.videoElement = self.$refs.videoElementWrapper.querySelector("video");
                            if (self.videoElement) {
                                console.log(self.videoElement)
                                self.setupVideoEventListeners();
                                observer.disconnect(); // Stop observing after the video is found
                            }
                        });

                        observer.observe(this.$refs.videoElementWrapper, {
                            subtree: true,
                            childList: true
                        });
                    }
                    
                },
            }
        }               
    </script>
</div>